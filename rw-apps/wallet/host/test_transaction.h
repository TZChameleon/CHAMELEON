/** \file
  *
  * \brief Not defined yet
  *
  * This file is licensed as described by the file LICENCE.
  */

#ifndef TEST_TRANSACTION_H_INCLUDED
#define TEST_TRANSACTION_H_INCLUDED

#include "common.h"
#include "test_helpers.h"
#include "transaction.h"

/** Stores one test case for encapsulateSignature(). */
struct EncapsulateSignatureTestStruct
{
	uint8_t r[32];
	uint8_t s[32];
	uint8_t expected_length;
	uint8_t expected_signature[MAX_SIGNATURE_LENGTH];
};

/** A known good test transaction. This one was intercepted from the original
  * Bitcoin client during the signing of a live transaction. The input
  * references and addresses have been changed to protect privacy. */
static const uint8_t good_full_transaction[] = {
// The first (and only) input transaction.
// This isn't part of the intercepted transaction; it was obtained from
// blockexplorer.com.
0x01, // is_ref = 1 (input)
0x01, 0x00, 0x00, 0x00, // output number to examine
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xdf, 0x08, 0xf9, 0xa3, 0x7c, 0x6d, 0x71, 0x3c, // previous output
0x6a, 0x99, 0x2e, 0x88, 0x29, 0x8e, 0x0b, 0x4c,
0x8f, 0xb5, 0xf9, 0x0e, 0x11, 0xf0, 0x2c, 0xa7,
0x36, 0x72, 0xeb, 0x58, 0xb3, 0x04, 0xef, 0xc0,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x8a, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x1b, 0xf4, 0xef, 0x3c, 0x34, 0x96, 0x02, 0x9b, 0x1a,
0xb1, 0xc8, 0x49, 0xbf, 0x18, 0x55, 0xcc, 0x16, 0xbc, 0x52, 0x6d, 0xcc, 0x20,
0xfb, 0x7c, 0x0a, 0x1d, 0x48, 0xd6, 0xe9, 0xbd, 0xd7, 0xb1, 0x02, 0x20, 0x53,
0xb1, 0xa3, 0xaa, 0xbf, 0xd3, 0x87, 0x84, 0xdc, 0xf3, 0x10, 0xe5, 0xd2, 0x09,
0xa4, 0xba, 0xb0, 0x01, 0x62, 0xe5, 0xbc, 0x09, 0x75, 0x9d, 0x4f, 0x74, 0x2c,
0xb4, 0x6b, 0x32, 0x37, 0x2c, 0x01,
0x41, // 65 bytes of data follows
0x04, 0x05, 0x4d, 0xb5, 0xe0, 0x8e, 0x2a, 0x33, 0x89, 0x2c, 0xf3, 0x4b, 0x7e,
0xbc, 0x18, 0x3b, 0xa5, 0xf5, 0x54, 0xc6, 0x9d, 0x6d, 0x21, 0x65, 0x60, 0x89,
0xf5, 0x5e, 0x2d, 0x0f, 0x3a, 0x68, 0x08, 0x23, 0x83, 0x19, 0xcd, 0x89, 0xba,
0xda, 0x09, 0x9b, 0xc6, 0xef, 0x3f, 0xdc, 0x80, 0xd8, 0x7a, 0xb2, 0xbf, 0x2b,
0x37, 0x18, 0xdd, 0x4a, 0x4e, 0x36, 0x09, 0x60, 0x28, 0x6e, 0x2e, 0x77, 0x57,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xc0, 0xa4, 0x70, 0x57, 0x00, 0x00, 0x00, 0x00, // 14.67 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 1Q6W8HTPdwccCkLRMLJpYkGvweKhpsKKjE
0xfd, 0x55, 0x49, 0x20, 0x22, 0xa0, 0x3f, 0xf7, 0x7a, 0x9d,
0xe0, 0x0d, 0xa2, 0x18, 0x08, 0x0c, 0xa9, 0x51, 0xde, 0xef,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x40, 0x54, 0x92, 0x3d, 0x00, 0x00, 0x00, 0x00, // 10.33 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 16E7VhudyU3iXNddNazG8sChjQwfWcrHNw
0x39, 0x53, 0x75, 0x46, 0x88, 0x84, 0x3d, 0xe5, 0x50, 0x0b,
0x79, 0x91, 0x33, 0x7f, 0x96, 0xf5, 0x41, 0x71, 0x48, 0xa1,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
// The main (spending) transaction.
0x00, // is_ref = 0 (main)
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x87, 0xd6, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01234567 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 16eCeyy63xi5yde9VrX4XCcRrCKZwtUZK
0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The input transaction from #good_full_transaction. */
static const uint8_t good_input_transaction[] = {
0x01, 0x00, 0x00, 0x00, // output number to examine
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xdf, 0x08, 0xf9, 0xa3, 0x7c, 0x6d, 0x71, 0x3c, // previous output
0x6a, 0x99, 0x2e, 0x88, 0x29, 0x8e, 0x0b, 0x4c,
0x8f, 0xb5, 0xf9, 0x0e, 0x11, 0xf0, 0x2c, 0xa7,
0x36, 0x72, 0xeb, 0x58, 0xb3, 0x04, 0xef, 0xc0,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x8a, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x1b, 0xf4, 0xef, 0x3c, 0x34, 0x96, 0x02, 0x9b, 0x1a,
0xb1, 0xc8, 0x49, 0xbf, 0x18, 0x55, 0xcc, 0x16, 0xbc, 0x52, 0x6d, 0xcc, 0x20,
0xfb, 0x7c, 0x0a, 0x1d, 0x48, 0xd6, 0xe9, 0xbd, 0xd7, 0xb1, 0x02, 0x20, 0x53,
0xb1, 0xa3, 0xaa, 0xbf, 0xd3, 0x87, 0x84, 0xdc, 0xf3, 0x10, 0xe5, 0xd2, 0x09,
0xa4, 0xba, 0xb0, 0x01, 0x62, 0xe5, 0xbc, 0x09, 0x75, 0x9d, 0x4f, 0x74, 0x2c,
0xb4, 0x6b, 0x32, 0x37, 0x2c, 0x01,
0x41, // 65 bytes of data follows
0x04, 0x05, 0x4d, 0xb5, 0xe0, 0x8e, 0x2a, 0x33, 0x89, 0x2c, 0xf3, 0x4b, 0x7e,
0xbc, 0x18, 0x3b, 0xa5, 0xf5, 0x54, 0xc6, 0x9d, 0x6d, 0x21, 0x65, 0x60, 0x89,
0xf5, 0x5e, 0x2d, 0x0f, 0x3a, 0x68, 0x08, 0x23, 0x83, 0x19, 0xcd, 0x89, 0xba,
0xda, 0x09, 0x9b, 0xc6, 0xef, 0x3f, 0xdc, 0x80, 0xd8, 0x7a, 0xb2, 0xbf, 0x2b,
0x37, 0x18, 0xdd, 0x4a, 0x4e, 0x36, 0x09, 0x60, 0x28, 0x6e, 0x2e, 0x77, 0x57,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xc0, 0xa4, 0x70, 0x57, 0x00, 0x00, 0x00, 0x00, // 14.67 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 1Q6W8HTPdwccCkLRMLJpYkGvweKhpsKKjE
0xfd, 0x55, 0x49, 0x20, 0x22, 0xa0, 0x3f, 0xf7, 0x7a, 0x9d,
0xe0, 0x0d, 0xa2, 0x18, 0x08, 0x0c, 0xa9, 0x51, 0xde, 0xef,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x40, 0x54, 0x92, 0x3d, 0x00, 0x00, 0x00, 0x00, // 10.33 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 16E7VhudyU3iXNddNazG8sChjQwfWcrHNw
0x39, 0x53, 0x75, 0x46, 0x88, 0x84, 0x3d, 0xe5, 0x50, 0x0b,
0x79, 0x91, 0x33, 0x7f, 0x96, 0xf5, 0x41, 0x71, 0x48, 0xa1,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
};

/** The main transaction from #good_full_transaction. This must actually be
  * the main transaction from #good_full_transaction, otherwise some tests
  * will complain about hashes not being calculated properly. */
static const uint8_t good_main_transaction[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x87, 0xd6, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01234567 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 16eCeyy63xi5yde9VrX4XCcRrCKZwtUZK
0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The main transaction from #good_full_transaction, with the inputs
  * removed. */
static const uint8_t inputs_removed_transaction[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0x02, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x87, 0xd6, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01234567 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 16eCeyy63xi5yde9VrX4XCcRrCKZwtUZK
0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** One input for a transaction. This was extracted
  * from the main transaction in #good_full_transaction. */
static const uint8_t one_input[] = {
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
};

/** One output for a transaction. This was extracted
  * from the main transaction in #good_full_transaction. */
static const uint8_t one_output[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// output address
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
};

/** First output amount to use. */
static const uint8_t output_amount1[] = {
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00 // 6 BTC
};

/** Second output amount to use. */
static const uint8_t output_amount2[] = {
0x87, 0xd6, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00 // 0.01234567 BTC
};

/** First output address to use. */
static const uint8_t output_address1[] = {
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33
};

/** Second output address to use. */
static const uint8_t output_address2[] = {
// 16eCeyy63xi5yde9VrX4XCcRrCKZwtUZK
0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33
};

/** The main transaction from #good_full_transaction, with the input
  * script set to a blank (zero-length) script. */
static const uint8_t good_main_transaction_blank_script[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x00, // script length
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x87, 0xd6, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01234567 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 16eCeyy63xi5yde9VrX4XCcRrCKZwtUZK
0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The transaction with the outputs of the main transaction removed.
  * This doesn't use the same input transaction as #good_full_transaction
  * because the total input amount needs to be sufficiently high to stop the
  * transaction parser from complaining about negative transaction fees
  * (which are checked before outputs). The reason why the input amount
  * needs to be high is that when outputs are removed, the parser
  * interprets locktime/hashtype as the output amount. For a standard
  * locktime/hashtype, this is 42.94967296 BTC. */
static const uint8_t outputs_removed_transaction[] = {
// The first (and only) input transaction.
// This is transaction 48be780987de0935ae04a53211872b25557956980124e8b5aba8ae63b9c93db9
// (not mine) from the main blockchain.
0x01, // is_ref = 1 (input)
0x01, 0x00, 0x00, 0x00, // output number to examine
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0x5e, 0x10, 0x64, 0xc9, 0x3a, 0x40, 0xb2, 0x32, // previous output
0x14, 0x49, 0x07, 0xfc, 0x30, 0x3c, 0x43, 0xa9,
0x73, 0xd1, 0x66, 0xd7, 0xc1, 0x84, 0x4b, 0x52,
0x12, 0x38, 0xc9, 0x0d, 0x38, 0x56, 0x61, 0x79,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x8b, // script length
0x48, // 72 bytes of data follows
0x30, 0x45, 0x02, 0x20, 0x7a, 0x25, 0x16, 0x65, 0xea, 0x04, 0x91, 0x2c, 0x31,
0x51, 0x23, 0xe8, 0x62, 0xf8, 0x66, 0x67, 0xd2, 0xfa, 0x65, 0x08, 0xdd, 0x0a,
0xd8, 0x32, 0x4c, 0x52, 0xcb, 0xaa, 0xa3, 0xca, 0x3d, 0x51, 0x02, 0x21, 0x00,
0xcd, 0x95, 0x71, 0x75, 0x7f, 0xc9, 0xd4, 0xad, 0x76, 0x17, 0x07, 0xda, 0x58,
0x4f, 0xdd, 0x7c, 0x08, 0x8d, 0xaf, 0x87, 0xcd, 0x80, 0x37, 0xf9, 0xc3, 0x6a,
0xcb, 0x5f, 0xbd, 0xde, 0x5f, 0x44, 0x01,
0x41, // 65 bytes of data follows
0x04, 0x37, 0x7d, 0xd0, 0xf9, 0x1b, 0x1b, 0xfa, 0x5e, 0x13, 0x56, 0xd3, 0x3c,
0xf2, 0x8b, 0xb5, 0x3a, 0x17, 0xd9, 0x1e, 0x28, 0x79, 0xe0, 0x11, 0xff, 0xfa,
0x4d, 0x4c, 0xf1, 0x1f, 0x6e, 0x6d, 0x3a, 0xde, 0x15, 0xdd, 0x90, 0x74, 0xf3,
0xf9, 0xc3, 0x63, 0x0c, 0x2e, 0x7b, 0xe7, 0x57, 0x34, 0x5b, 0x41, 0x6d, 0x1b,
0x9a, 0xce, 0x71, 0x6e, 0x4f, 0x7c, 0x66, 0x3e, 0xab, 0xb0, 0x5e, 0xe4, 0x2d,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0x6f, 0x53, 0xf5, 0xe4, 0x07, 0x00, 0x00, 0x00, // 339.06053999 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 1EpM6XVjV9EKuKXdzWeSvo7nBbTdmozUJB
0x97, 0x8d, 0xf5, 0xc7, 0xe8, 0x55, 0x8c, 0x98, 0xd8, 0xba,
0x52, 0x0e, 0x3d, 0xf6, 0xa0, 0x0b, 0x99, 0x79, 0x2b, 0x21,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x91, 0xec, 0xc1, 0x5e, 0xb2, 0x00, 0x00, 0x00, // 7660.93946001 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 1aCW2vs7Xphjea1jyk3ZykYiujvUwSGaC
0x06, 0x47, 0x53, 0xb1, 0xf5, 0xb6, 0x4f, 0x34, 0xfb, 0xfc,
0xe4, 0xa8, 0x0c, 0xe0, 0x4c, 0xc1, 0xa8, 0xa3, 0x4e, 0xf4,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
// The main (spending) transaction.
0x00, // is_ref = 0 (main)
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xb9, 0x3d, 0xc9, 0xb9, 0x63, 0xae, 0xa8, 0xab, // previous output
0xb5, 0xe8, 0x24, 0x01, 0x98, 0x56, 0x79, 0x55,
0x25, 0x2b, 0x87, 0x11, 0x32, 0xa5, 0x04, 0xae,
0x35, 0x09, 0xde, 0x87, 0x09, 0x78, 0xbe, 0x48,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** A transaction which has more outputs than specified. The input
  * amount needs to be high for similar reasons
  * to #outputs_removed_transaction. */
static const uint8_t too_many_outputs_transaction[] = {
// The first (and only) input transaction.
// This is transaction 48be780987de0935ae04a53211872b25557956980124e8b5aba8ae63b9c93db9
// (not mine) from the main blockchain.
0x01, // is_ref = 1 (input)
0x01, 0x00, 0x00, 0x00, // output number to examine
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0x5e, 0x10, 0x64, 0xc9, 0x3a, 0x40, 0xb2, 0x32, // previous output
0x14, 0x49, 0x07, 0xfc, 0x30, 0x3c, 0x43, 0xa9,
0x73, 0xd1, 0x66, 0xd7, 0xc1, 0x84, 0x4b, 0x52,
0x12, 0x38, 0xc9, 0x0d, 0x38, 0x56, 0x61, 0x79,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x8b, // script length
0x48, // 72 bytes of data follows
0x30, 0x45, 0x02, 0x20, 0x7a, 0x25, 0x16, 0x65, 0xea, 0x04, 0x91, 0x2c, 0x31,
0x51, 0x23, 0xe8, 0x62, 0xf8, 0x66, 0x67, 0xd2, 0xfa, 0x65, 0x08, 0xdd, 0x0a,
0xd8, 0x32, 0x4c, 0x52, 0xcb, 0xaa, 0xa3, 0xca, 0x3d, 0x51, 0x02, 0x21, 0x00,
0xcd, 0x95, 0x71, 0x75, 0x7f, 0xc9, 0xd4, 0xad, 0x76, 0x17, 0x07, 0xda, 0x58,
0x4f, 0xdd, 0x7c, 0x08, 0x8d, 0xaf, 0x87, 0xcd, 0x80, 0x37, 0xf9, 0xc3, 0x6a,
0xcb, 0x5f, 0xbd, 0xde, 0x5f, 0x44, 0x01,
0x41, // 65 bytes of data follows
0x04, 0x37, 0x7d, 0xd0, 0xf9, 0x1b, 0x1b, 0xfa, 0x5e, 0x13, 0x56, 0xd3, 0x3c,
0xf2, 0x8b, 0xb5, 0x3a, 0x17, 0xd9, 0x1e, 0x28, 0x79, 0xe0, 0x11, 0xff, 0xfa,
0x4d, 0x4c, 0xf1, 0x1f, 0x6e, 0x6d, 0x3a, 0xde, 0x15, 0xdd, 0x90, 0x74, 0xf3,
0xf9, 0xc3, 0x63, 0x0c, 0x2e, 0x7b, 0xe7, 0x57, 0x34, 0x5b, 0x41, 0x6d, 0x1b,
0x9a, 0xce, 0x71, 0x6e, 0x4f, 0x7c, 0x66, 0x3e, 0xab, 0xb0, 0x5e, 0xe4, 0x2d,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0x6f, 0x53, 0xf5, 0xe4, 0x07, 0x00, 0x00, 0x00, // 339.06053999 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 1EpM6XVjV9EKuKXdzWeSvo7nBbTdmozUJB
0x97, 0x8d, 0xf5, 0xc7, 0xe8, 0x55, 0x8c, 0x98, 0xd8, 0xba,
0x52, 0x0e, 0x3d, 0xf6, 0xa0, 0x0b, 0x99, 0x79, 0x2b, 0x21,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x91, 0xec, 0xc1, 0x5e, 0xb2, 0x00, 0x00, 0x00, // 7660.93946001 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 1aCW2vs7Xphjea1jyk3ZykYiujvUwSGaC
0x06, 0x47, 0x53, 0xb1, 0xf5, 0xb6, 0x4f, 0x34, 0xfb, 0xfc,
0xe4, 0xa8, 0x0c, 0xe0, 0x4c, 0xc1, 0xa8, 0xa3, 0x4e, 0xf4,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
// The main (spending) transaction.
0x00, // is_ref = 0 (main)
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xb9, 0x3d, 0xc9, 0xb9, 0x63, 0xae, 0xa8, 0xab, // previous output
0xb5, 0xe8, 0x24, 0x01, 0x98, 0x56, 0x79, 0x55,
0x25, 0x2b, 0x87, 0x11, 0x32, 0xa5, 0x04, 0xae,
0x35, 0x09, 0xde, 0x87, 0x09, 0x78, 0xbe, 0x48,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x03, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x87, 0xd6, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01234567 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 16eCeyy63xi5yde9VrX4XCcRrCKZwtUZK
0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The main transaction from #good_full_transaction, with an output
  * script set to a blank (zero-length) script. */
static const uint8_t good_test_transaction_blank_output_script[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x87, 0xd6, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01234567 BTC
0x00, // script length
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The main transaction from #good_full_transaction, with one output which
  * is non-standard. */
static const uint8_t non_standard1[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x01, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x18, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The main transaction from #good_full_transaction, with one output which
  * is non-standard. */
static const uint8_t non_standard2[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x01, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x18, // script length
0x76, // OP_DUP
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The main transaction from #good_full_transaction, with one output which
  * is non-standard. */
static const uint8_t non_standard3[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x01, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x18, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x13, // 19 bytes of data follows
0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The main transaction from #good_full_transaction, with one output which
  * is non-standard. */
static const uint8_t non_standard4[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x01, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x1A, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x15, // 21 bytes of data follows
0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xff, 0xff,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The main transaction from #good_full_transaction, with one output which
  * is non-standard. */
static const uint8_t non_standard5[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x01, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
0x76, // OP_DUP
0xAA, // OP_HASH256
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The main transaction from #good_full_transaction, with one output which
  * is non-standard. */
static const uint8_t non_standard6[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x01, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x87, // OP_EQUAL
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** The main transaction from #good_full_transaction, with one output which
  * is non-standard. */
static const uint8_t non_standard7[] = {
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x01, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
// OP_CHECKSIG spam
0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC,
0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC,
0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC, 0xAC,
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** This is #good_full_transaction, but with the input amount set to
  * 21 million BTC and number of outputs set to 1 so that the output amount
  * checks can be tested. */
static const uint8_t big_amount_full_transaction[] = {
// The first (and only) input transaction.
// This isn't part of the intercepted transaction; it was obtained from
// blockexplorer.com.
0x01, // is_ref = 1 (input)
0x00, 0x00, 0x00, 0x00, // output number to examine
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xdf, 0x08, 0xf9, 0xa3, 0x7c, 0x6d, 0x71, 0x3c, // previous output
0x6a, 0x99, 0x2e, 0x88, 0x29, 0x8e, 0x0b, 0x4c,
0x8f, 0xb5, 0xf9, 0x0e, 0x11, 0xf0, 0x2c, 0xa7,
0x36, 0x72, 0xeb, 0x58, 0xb3, 0x04, 0xef, 0xc0,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x8a, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x1b, 0xf4, 0xef, 0x3c, 0x34, 0x96, 0x02, 0x9b, 0x1a,
0xb1, 0xc8, 0x49, 0xbf, 0x18, 0x55, 0xcc, 0x16, 0xbc, 0x52, 0x6d, 0xcc, 0x20,
0xfb, 0x7c, 0x0a, 0x1d, 0x48, 0xd6, 0xe9, 0xbd, 0xd7, 0xb1, 0x02, 0x20, 0x53,
0xb1, 0xa3, 0xaa, 0xbf, 0xd3, 0x87, 0x84, 0xdc, 0xf3, 0x10, 0xe5, 0xd2, 0x09,
0xa4, 0xba, 0xb0, 0x01, 0x62, 0xe5, 0xbc, 0x09, 0x75, 0x9d, 0x4f, 0x74, 0x2c,
0xb4, 0x6b, 0x32, 0x37, 0x2c, 0x01,
0x41, // 65 bytes of data follows
0x04, 0x05, 0x4d, 0xb5, 0xe0, 0x8e, 0x2a, 0x33, 0x89, 0x2c, 0xf3, 0x4b, 0x7e,
0xbc, 0x18, 0x3b, 0xa5, 0xf5, 0x54, 0xc6, 0x9d, 0x6d, 0x21, 0x65, 0x60, 0x89,
0xf5, 0x5e, 0x2d, 0x0f, 0x3a, 0x68, 0x08, 0x23, 0x83, 0x19, 0xcd, 0x89, 0xba,
0xda, 0x09, 0x9b, 0xc6, 0xef, 0x3f, 0xdc, 0x80, 0xd8, 0x7a, 0xb2, 0xbf, 0x2b,
0x37, 0x18, 0xdd, 0x4a, 0x4e, 0x36, 0x09, 0x60, 0x28, 0x6e, 0x2e, 0x77, 0x57,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x01, // number of outputs
0x00, 0x40, 0x07, 0x5A, 0xF0, 0x75, 0x07, 0x00, // 21000000 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 16E7VhudyU3iXNddNazG8sChjQwfWcrHNw
0x39, 0x53, 0x75, 0x46, 0x88, 0x84, 0x3d, 0xe5, 0x50, 0x0b,
0x79, 0x91, 0x33, 0x7f, 0x96, 0xf5, 0x41, 0x71, 0x48, 0xa1,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
// The main (spending) transaction.
0x00, // is_ref = 0 (main)
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0x00, 0x19, 0x3c, 0x4d, 0xe2, 0xdb, 0xc9, 0xf9, // previous output
0xca, 0x09, 0xde, 0xb7, 0x41, 0x7a, 0xe4, 0x47,
0x7a, 0x01, 0x72, 0x7a, 0xcc, 0xb8, 0x7a, 0x77,
0x66, 0x99, 0xcb, 0x9f, 0x83, 0x27, 0x32, 0xc8,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x01, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** Transaction data to prepend to P2SH test transactions in order to
  * generate a full transaction. The data consists of two input
  * transactions:
  * 4049ff07193b7a021774b043c9e5447a2cf3fac623244753cce6c717d9836594:0 and
  * f26df87eabea87adeef8f7865481590cd9f441400d2acd03e237f1bc5acd8b78:0.
  */
static const uint8_t p2sh_test_prepend[] = {
// The first input transaction.
0x01, // is_ref = 1 (input)
0x00, 0x00, 0x00, 0x00, // output number to examine
0x01, 0x00, 0x00, 0x00, // version
0x02, // number of inputs
0x1b, 0x45, 0xd2, 0x95, 0x0f, 0x16, 0x79, 0x36, // previous output
0x07, 0x3f, 0xa9, 0x8b, 0x6a, 0xe5, 0x0e, 0x05,
0x0b, 0xab, 0xf0, 0x9c, 0x02, 0x6e, 0xd7, 0x18,
0x4a, 0x88, 0xc5, 0x8f, 0x73, 0x83, 0x7b, 0x8b,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6c, // script length
0x49, // 73 bytes of data follows
0x30, 0x46, 0x02, 0x21, 0x00, 0xf0, 0x17, 0x02, 0x70, 0xa3, 0x2c, 0xd5, 0x69,
0x14, 0x25, 0x76, 0x78, 0x94, 0xad, 0xd5, 0x11, 0x8f, 0xe8, 0x65, 0xaf, 0xb2,
0xa4, 0x38, 0x90, 0xfd, 0xc4, 0xbd, 0xe9, 0xe2, 0xcf, 0x2a, 0xee, 0x02, 0x21,
0x00, 0xe7, 0xc9, 0x65, 0xcd, 0x70, 0xbf, 0x54, 0x78, 0x16, 0xbd, 0x23, 0x80,
0xfe, 0xde, 0x18, 0x05, 0x92, 0x89, 0xd2, 0xe4, 0x09, 0x33, 0x8d, 0xe9, 0x13,
0x81, 0x02, 0x37, 0xd3, 0xbf, 0xf6, 0x1a, 0x01,
0x21, // 33 bytes of data follows
0x03, 0x04, 0x21, 0x11, 0x7b, 0x41, 0x0a, 0x65, 0x5b, 0x5d, 0x8f, 0xc9, 0x4a,
0x6f, 0x3d, 0xd6, 0xd4, 0x3d, 0x12, 0x97, 0x39, 0xbd, 0x9d, 0x96, 0x0e, 0x40,
0x89, 0x4d, 0x29, 0xf2, 0x1c, 0x60, 0x30,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, 0xfa, 0xee, 0x8e, 0x09, 0x6a, 0x0a, 0x62, // previous output
0x66, 0xcc, 0x9d, 0xa7, 0x2f, 0xbc, 0xaa, 0xc1,
0x12, 0xc8, 0x07, 0x9c, 0x48, 0xec, 0x14, 0xa5,
0x8e, 0x49, 0xfa, 0x47, 0x71, 0x02, 0x23, 0xbe,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6c, // script length
0x49, // 73 bytes of data follows
0x30, 0x46, 0x02, 0x21, 0x00, 0xb5, 0xe3, 0x32, 0x67, 0x0c, 0x7c, 0xd6, 0x77,
0x96, 0xba, 0xec, 0xfe, 0x24, 0x34, 0x7f, 0x2c, 0x2e, 0xb6, 0xaa, 0xc9, 0x44,
0x77, 0xe9, 0x02, 0x71, 0xb1, 0xfe, 0xed, 0x58, 0xed, 0xff, 0xe1, 0x02, 0x21,
0x00, 0x88, 0x94, 0x9f, 0xab, 0x19, 0x2b, 0x03, 0x31, 0x09, 0x3e, 0xd8, 0x04,
0x5a, 0xec, 0x60, 0x32, 0x95, 0xe6, 0xe3, 0x6f, 0x3a, 0x5e, 0x6b, 0xbd, 0x1e,
0xb3, 0x5a, 0x7d, 0xfb, 0x97, 0x57, 0x31, 0x01,
0x21, // 33 bytes of data follows
0x03, 0xa4, 0x24, 0x42, 0xc0, 0xf7, 0xe4, 0xab, 0x02, 0x52, 0x8f, 0xf5, 0x1c,
0x64, 0xb7, 0x28, 0x82, 0x85, 0x96, 0xc4, 0x76, 0x73, 0xa6, 0x5b, 0xf0, 0x2a,
0x1a, 0x98, 0xd7, 0x44, 0x61, 0xe6, 0x96,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xc7, 0x7d, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01080775 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0x7c, 0x9b, 0x57, 0xeb, 0x83, 0x41, 0x3f, 0x83, 0x94, 0x85,
0x32, 0x43, 0x98, 0xa9, 0xe7, 0x29, 0x9f, 0x7a, 0x28, 0xb9,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x80, 0x1f, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.10428288 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0x6f, 0x96, 0x60, 0xe4, 0x22, 0xa9, 0xc1, 0x34, 0x31, 0x3f,
0x85, 0x8b, 0x43, 0xdf, 0x75, 0xd3, 0x80, 0x57, 0x3e, 0x3f,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
// The second input transaction.
0x01, // is_ref = 1 (input)
0x00, 0x00, 0x00, 0x00, // output number to examine
0x01, 0x00, 0x00, 0x00, // version
0x05, // number of inputs
0xd0, 0x13, 0x06, 0x79, 0xab, 0x57, 0xb8, 0xcf, // previous output
0xe7, 0x43, 0xd3, 0x1a, 0xd0, 0xd7, 0x3c, 0x9e,
0x76, 0x74, 0x09, 0xdd, 0x98, 0xe5, 0x3f, 0x70,
0x1a, 0x86, 0xe8, 0x77, 0xa1, 0x77, 0x53, 0x15,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6a, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x1c, 0x5e, 0x1e, 0xfd, 0xc9, 0x12, 0x5c, 0x8b, 0x65,
0x9a, 0xf2, 0xe9, 0xcc, 0x64, 0x62, 0xee, 0x19, 0xaa, 0xb1, 0xf4, 0x2e, 0x49,
0x48, 0xf0, 0xc4, 0xb0, 0x5e, 0x30, 0x9d, 0x6c, 0x1f, 0xa8, 0x02, 0x20, 0x6b,
0x9e, 0xc9, 0x26, 0xf3, 0x57, 0x31, 0x77, 0x37, 0x3b, 0xa0, 0x27, 0x26, 0xee,
0xa4, 0x12, 0x90, 0xd8, 0xd7, 0xb7, 0x39, 0xb5, 0x22, 0x4f, 0x6c, 0xc1, 0xa0,
0x04, 0xbd, 0x13, 0xdd, 0xac, 0x01,
0x21, // 33 bytes of data follows
0x03, 0xf1, 0x51, 0xc4, 0xb7, 0x78, 0xff, 0x27, 0x13, 0xfe, 0x8a, 0x32, 0x2b,
0x52, 0xe2, 0xf1, 0xcc, 0x8a, 0xa0, 0x1e, 0x94, 0xb9, 0xc0, 0x8e, 0x2a, 0xbe,
0x17, 0xc9, 0x9d, 0x23, 0x32, 0x1d, 0x27,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0xb3, 0x42, 0x00, 0x15, 0x23, 0x26, 0x1d, 0x88, // previous output
0x4d, 0xd7, 0xde, 0x00, 0x39, 0x8d, 0x3b, 0xf9,
0x8e, 0x9e, 0x6e, 0xf8, 0x7c, 0xe0, 0xc3, 0x3e,
0x3d, 0xc6, 0xbe, 0x8f, 0x29, 0x7e, 0xf8, 0x7e,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6c, // script length
0x49, // 73 bytes of data follows
0x30, 0x46, 0x02, 0x21, 0x00, 0xe2, 0xb0, 0xfd, 0x5b, 0x1b, 0xdf, 0x48, 0xa6,
0xa4, 0xdb, 0x49, 0x62, 0xae, 0x43, 0x74, 0xde, 0xae, 0x9e, 0x3e, 0xb0, 0xd9,
0x47, 0xe9, 0x55, 0x26, 0x93, 0xb9, 0xfb, 0x7c, 0xf5, 0x48, 0xbe, 0x02, 0x21,
0x00, 0xba, 0x72, 0xc9, 0x3a, 0x1a, 0x96, 0x6c, 0x45, 0xec, 0x47, 0x92, 0x6e,
0x8d, 0x56, 0xde, 0xd6, 0x51, 0xad, 0x3d, 0xbd, 0x0b, 0x33, 0xa0, 0x24, 0x1d,
0x83, 0xed, 0x8d, 0x1d, 0x95, 0xce, 0x80, 0x01,
0x21, // 33 bytes of data follows
0x03, 0x2f, 0x09, 0xc7, 0x82, 0xd7, 0xd2, 0x17, 0xff, 0x81, 0xb6, 0xde, 0x5c,
0x9d, 0x16, 0x50, 0xf8, 0x51, 0x4a, 0x38, 0xb0, 0xf5, 0x1f, 0x3c, 0xc7, 0xb0,
0x52, 0x7a, 0x2f, 0x83, 0xac, 0x6f, 0xeb,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x8e, 0xde, 0xa0, 0x30, 0xe4, 0x29, 0x30, 0x9e, // previous output
0x1d, 0xa3, 0x7c, 0x01, 0x61, 0xe3, 0xea, 0xa4,
0xc9, 0x45, 0x8c, 0x09, 0x1b, 0x4d, 0xdd, 0x2e,
0xdd, 0x38, 0x12, 0x0c, 0x19, 0x7f, 0x23, 0x7d,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6b, // script length
0x48, // 72 bytes of data follows
0x30, 0x45, 0x02, 0x20, 0x56, 0x4d, 0xd3, 0x29, 0x48, 0x98, 0xa3, 0x0b, 0x58,
0x6f, 0xdf, 0x3d, 0xbb, 0x3d, 0x6f, 0xc2, 0x8f, 0x04, 0x2c, 0x44, 0x19, 0x64,
0xd5, 0x9d, 0xbd, 0xc8, 0x83, 0x3a, 0x05, 0x02, 0xd0, 0x55, 0x02, 0x21, 0x00,
0xd3, 0xb0, 0xf2, 0xd8, 0x4d, 0xf4, 0x7e, 0x75, 0x7e, 0xc6, 0x6c, 0x61, 0x1a,
0x08, 0xaa, 0x55, 0x7d, 0xf5, 0x13, 0xd6, 0xa5, 0x66, 0xf9, 0xa3, 0x90, 0xdf,
0xe4, 0x09, 0x8a, 0xcd, 0x7c, 0xa1, 0x01,
0x21, // 33 bytes of data follows
0x02, 0x5f, 0x32, 0x2c, 0x25, 0x65, 0x10, 0xeb, 0x87, 0x62, 0xb5, 0x6d, 0xe5,
0xe4, 0x88, 0x04, 0x2b, 0xec, 0x08, 0x05, 0x44, 0x19, 0x59, 0x96, 0x9a, 0x2f,
0xd3, 0x94, 0xb8, 0x2b, 0x35, 0x97, 0xca,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x65, 0xe0, 0x2f, 0xe9, 0x17, 0xb7, 0xcd, 0x2f, // previous output
0xaf, 0x70, 0xfa, 0x29, 0xb9, 0xe4, 0x07, 0xc1,
0xad, 0x17, 0xa4, 0x27, 0x39, 0xcd, 0x3f, 0xda,
0x82, 0xd8, 0x8d, 0x99, 0x7f, 0x13, 0xda, 0x05,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6c, // script length
0x49, // 73 bytes of data follows
0x30, 0x46, 0x02, 0x21, 0x00, 0xe1, 0x47, 0x23, 0xba, 0xb5, 0x04, 0x13, 0xd1,
0x13, 0x88, 0xcd, 0x16, 0x21, 0x57, 0xb6, 0x39, 0x98, 0xe4, 0x02, 0xac, 0xee,
0xfc, 0x7e, 0x68, 0x34, 0xf3, 0x72, 0x83, 0x9c, 0xf8, 0x4c, 0x04, 0x02, 0x21,
0x00, 0x99, 0xf2, 0x49, 0xf1, 0x0f, 0xea, 0xe2, 0x0f, 0x5b, 0x24, 0x0d, 0xc3,
0x5f, 0xfa, 0x30, 0x81, 0x11, 0xd7, 0x18, 0x3e, 0x5a, 0x74, 0x86, 0xf0, 0xb9,
0x03, 0x72, 0xc0, 0x91, 0x14, 0xf7, 0xe8, 0x01,
0x21, // 33 bytes of data follows
0x03, 0x49, 0xb5, 0x6e, 0x77, 0x33, 0xaa, 0x5f, 0x4f, 0xaa, 0x86, 0xdc, 0xa2,
0xe9, 0x28, 0xba, 0x6c, 0x83, 0x6b, 0x98, 0xff, 0x10, 0xc6, 0x66, 0x24, 0x7a,
0xa6, 0xef, 0xed, 0x66, 0xe4, 0x17, 0xf0,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0xb2, 0x1d, 0x63, 0x9d, 0x27, 0x52, 0xbf, 0xdb, // previous output
0xf7, 0x55, 0x6c, 0x5f, 0x04, 0xab, 0xd5, 0xf6,
0x25, 0x2a, 0xc5, 0xb0, 0x62, 0x01, 0xe5, 0xb5,
0xcc, 0xd1, 0x5a, 0x71, 0xdf, 0x1e, 0xb5, 0x52,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6a, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x61, 0xe0, 0x06, 0x36, 0xa4, 0x4c, 0xf0, 0x9e, 0x95,
0xc5, 0xf1, 0x66, 0x23, 0x99, 0xe2, 0xc4, 0x64, 0x76, 0xc9, 0xf9, 0x6c, 0xe1,
0x4e, 0x7b, 0x7a, 0x05, 0xfc, 0x9c, 0x24, 0xa9, 0x3d, 0x4b, 0x02, 0x20, 0x52,
0xa2, 0xe7, 0x1c, 0x51, 0x1f, 0x96, 0x65, 0x6d, 0xa8, 0x1e, 0x53, 0xb0, 0x5b,
0x46, 0xd6, 0xb3, 0x00, 0xa1, 0x5b, 0x19, 0xd8, 0x58, 0x31, 0x07, 0xa0, 0x32,
0xdd, 0xbf, 0x85, 0xad, 0x27, 0x01,
0x21, // 33 bytes of data follows
0x02, 0xbc, 0xb5, 0x1f, 0x6c, 0x30, 0xf0, 0xf3, 0x89, 0x19, 0xe3, 0x2f, 0x96,
0x11, 0xdf, 0x86, 0x28, 0x8e, 0xa1, 0xc3, 0x74, 0xfe, 0x9d, 0x9a, 0x66, 0x83,
0xd6, 0x8e, 0xbc, 0x41, 0x46, 0xa2, 0x88,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xa8, 0xbb, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01293224 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0x2b, 0x14, 0xcc, 0x3d, 0x20, 0x5b, 0x70, 0x3e, 0xb5, 0x34,
0x8b, 0x7b, 0x64, 0x37, 0x19, 0x62, 0x2b, 0xc3, 0xb8, 0x63,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x7b, 0x72, 0x3f, 0x01, 0x00, 0x00, 0x00, 0x00, // 0.20935291 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xb7, 0x4f, 0xcf, 0x65, 0xf2, 0xa5, 0x2b, 0x5f, 0x96, 0x9e,
0x87, 0x13, 0x40, 0xed, 0xc5, 0x5d, 0x94, 0x61, 0x2f, 0xa8,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
// The main (spending) transaction.
0x00, // is_ref = 0 (main)
};

/** Transaction fd3a8aa196a06f9c4aab10850dd3f10328fe9db4eee63af554da8baac608ab04
  * from the main blockchain (contained in block 177958). It spends to the P2SH
  * address 3FArYwLzPwRBbh1yN3Fx6tBZ5rZBPdaMPt. */
static const uint8_t good_p2sh_transaction[] = {
0x01, 0x00, 0x00, 0x00, // version
0x02, // number of inputs
0x94, 0x65, 0x83, 0xd9, 0x17, 0xc7, 0xe6, 0xcc, // previous output
0x53, 0x47, 0x24, 0x23, 0xc6, 0xfa, 0xf3, 0x2c,
0x7a, 0x44, 0xe5, 0xc9, 0x43, 0xb0, 0x74, 0x17,
0x02, 0x7a, 0x3b, 0x19, 0x07, 0xff, 0x49, 0x40,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6B, // script length
0x48, // 72 bytes of data follows
0x30, 0x45, 0x02, 0x21, 0x00, 0x83, 0xc1, 0xce, // signature
0xb7, 0x9d, 0x99, 0xf4, 0x63, 0xe4, 0x4e, 0x36,
0x06, 0x14, 0xa6, 0x99, 0x6f, 0xb5, 0x66, 0xd8,
0x33, 0x04, 0x07, 0x38, 0x59, 0x63, 0xc5, 0xf1,
0xc4, 0xb7, 0x2a, 0x3a, 0x67, 0x02, 0x20, 0x30,
0x9a, 0x36, 0x1b, 0x7f, 0x07, 0xa9, 0x2c, 0xc4,
0x9e, 0x2e, 0x67, 0xeb, 0xb0, 0x78, 0x9c, 0x3e,
0xc4, 0xdb, 0x9d, 0x59, 0x40, 0x7d, 0x6d, 0x6e,
0x10, 0x7e, 0xc4, 0x0a, 0x20, 0x17, 0xb5, 0x01,
0x21, // 33 bytes of data follows
0x02, 0x94, 0x69, 0xf7, 0xc2, 0xf2, 0xcf, 0x66, // compressed public key
0x9d, 0x1c, 0x45, 0x2f, 0x09, 0x93, 0x62, 0x65,
0x8c, 0x94, 0x3f, 0xc6, 0x91, 0x85, 0x69, 0x35,
0x7c, 0x4a, 0xae, 0xec, 0xa2, 0x6e, 0x8b, 0x4b, 0x41,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x78, 0x8b, 0xcd, 0x5a, 0xbc, 0xf1, 0x37, 0xe2, // previous output
0x03, 0xcd, 0x2a, 0x0d, 0x40, 0x41, 0xf4, 0xd9,
0x0c, 0x59, 0x81, 0x54, 0x86, 0xf7, 0xf8, 0xee,
0xad, 0x87, 0xea, 0xab, 0x7e, 0xf8, 0x6d, 0xf2,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6A, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x74, 0xf5, 0xee, 0xa7,
0xe8, 0x57, 0x23, 0xa6, 0x5f, 0x41, 0xb6, 0x9e,
0x65, 0x31, 0x8b, 0xa5, 0x4e, 0xbe, 0xb9, 0x3b,
0x16, 0xfd, 0xd5, 0xd7, 0xc0, 0x9f, 0x7c, 0x7a,
0x3a, 0xcc, 0x01, 0x4f, 0x02, 0x20, 0x4b, 0x03,
0xe7, 0x19, 0x15, 0x22, 0x3b, 0x5b, 0xe7, 0x51,
0xaf, 0x1e, 0x7e, 0xb8, 0x43, 0x0b, 0xf4, 0x9e,
0x4e, 0x2d, 0x53, 0x81, 0x02, 0x2d, 0xc5, 0xe4,
0x3e, 0xae, 0x9b, 0x88, 0x9d, 0x9c, 0x01,
0x21, // 33 bytes of data follows
0x03, 0x55, 0xaf, 0x8c, 0x21, 0x9b, 0xb5, 0x89,
0x5f, 0x4c, 0x1a, 0x57, 0x41, 0xd8, 0x69, 0x34,
0xf0, 0x25, 0x50, 0x46, 0x25, 0xa8, 0xb4, 0x27,
0xc9, 0xa5, 0x71, 0xab, 0xb9, 0xce, 0x89, 0x24, 0x20,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xdf, 0x33, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01323999 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xbe, 0xc4, 0x63, 0x34, 0x0d, 0x50, 0xf3, 0x8e, 0x9a, 0xbc,
0x4f, 0x88, 0x79, 0xf8, 0x1f, 0x25, 0x5b, 0xa7, 0xb1, 0x3c,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x40, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01 BTC
0x17, // script length
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0x93, 0xdd, 0x75, 0x55, 0x88, 0x93, 0xd9, 0x7c, 0x53, 0x00,
0x5f, 0x6b, 0x63, 0xb9, 0xe4, 0x00, 0x54, 0x01, 0xa9, 0x31,
0x87, // OP_EQUAL
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** This is #good_p2sh_transaction, but with a non-standard output script
  * which is almost a P2SH output script. */
static const uint8_t nonstandard_p2sh_transaction1[] = {
0x01, 0x00, 0x00, 0x00, // version
0x02, // number of inputs
0x94, 0x65, 0x83, 0xd9, 0x17, 0xc7, 0xe6, 0xcc, // previous output
0x53, 0x47, 0x24, 0x23, 0xc6, 0xfa, 0xf3, 0x2c,
0x7a, 0x44, 0xe5, 0xc9, 0x43, 0xb0, 0x74, 0x17,
0x02, 0x7a, 0x3b, 0x19, 0x07, 0xff, 0x49, 0x40,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6B, // script length
0x48, // 72 bytes of data follows
0x30, 0x45, 0x02, 0x21, 0x00, 0x83, 0xc1, 0xce, // signature
0xb7, 0x9d, 0x99, 0xf4, 0x63, 0xe4, 0x4e, 0x36,
0x06, 0x14, 0xa6, 0x99, 0x6f, 0xb5, 0x66, 0xd8,
0x33, 0x04, 0x07, 0x38, 0x59, 0x63, 0xc5, 0xf1,
0xc4, 0xb7, 0x2a, 0x3a, 0x67, 0x02, 0x20, 0x30,
0x9a, 0x36, 0x1b, 0x7f, 0x07, 0xa9, 0x2c, 0xc4,
0x9e, 0x2e, 0x67, 0xeb, 0xb0, 0x78, 0x9c, 0x3e,
0xc4, 0xdb, 0x9d, 0x59, 0x40, 0x7d, 0x6d, 0x6e,
0x10, 0x7e, 0xc4, 0x0a, 0x20, 0x17, 0xb5, 0x01,
0x21, // 33 bytes of data follows
0x02, 0x94, 0x69, 0xf7, 0xc2, 0xf2, 0xcf, 0x66, // compressed public key
0x9d, 0x1c, 0x45, 0x2f, 0x09, 0x93, 0x62, 0x65,
0x8c, 0x94, 0x3f, 0xc6, 0x91, 0x85, 0x69, 0x35,
0x7c, 0x4a, 0xae, 0xec, 0xa2, 0x6e, 0x8b, 0x4b, 0x41,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x78, 0x8b, 0xcd, 0x5a, 0xbc, 0xf1, 0x37, 0xe2, // previous output
0x03, 0xcd, 0x2a, 0x0d, 0x40, 0x41, 0xf4, 0xd9,
0x0c, 0x59, 0x81, 0x54, 0x86, 0xf7, 0xf8, 0xee,
0xad, 0x87, 0xea, 0xab, 0x7e, 0xf8, 0x6d, 0xf2,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6A, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x74, 0xf5, 0xee, 0xa7,
0xe8, 0x57, 0x23, 0xa6, 0x5f, 0x41, 0xb6, 0x9e,
0x65, 0x31, 0x8b, 0xa5, 0x4e, 0xbe, 0xb9, 0x3b,
0x16, 0xfd, 0xd5, 0xd7, 0xc0, 0x9f, 0x7c, 0x7a,
0x3a, 0xcc, 0x01, 0x4f, 0x02, 0x20, 0x4b, 0x03,
0xe7, 0x19, 0x15, 0x22, 0x3b, 0x5b, 0xe7, 0x51,
0xaf, 0x1e, 0x7e, 0xb8, 0x43, 0x0b, 0xf4, 0x9e,
0x4e, 0x2d, 0x53, 0x81, 0x02, 0x2d, 0xc5, 0xe4,
0x3e, 0xae, 0x9b, 0x88, 0x9d, 0x9c, 0x01,
0x21, // 33 bytes of data follows
0x03, 0x55, 0xaf, 0x8c, 0x21, 0x9b, 0xb5, 0x89,
0x5f, 0x4c, 0x1a, 0x57, 0x41, 0xd8, 0x69, 0x34,
0xf0, 0x25, 0x50, 0x46, 0x25, 0xa8, 0xb4, 0x27,
0xc9, 0xa5, 0x71, 0xab, 0xb9, 0xce, 0x89, 0x24, 0x20,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xdf, 0x33, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01323999 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xbe, 0xc4, 0x63, 0x34, 0x0d, 0x50, 0xf3, 0x8e, 0x9a, 0xbc,
0x4f, 0x88, 0x79, 0xf8, 0x1f, 0x25, 0x5b, 0xa7, 0xb1, 0x3c,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x40, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01 BTC
0x16, // script length
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0x93, 0xdd, 0x75, 0x55, 0x88, 0x93, 0xd9, 0x7c, 0x53, 0x00,
0x5f, 0x6b, 0x63, 0xb9, 0xe4, 0x00, 0x54, 0x01, 0xa9, 0x31,
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** This is #good_p2sh_transaction, but with a non-standard output script
  * which is almost a P2SH output script. */
static const uint8_t nonstandard_p2sh_transaction2[] = {
0x01, 0x00, 0x00, 0x00, // version
0x02, // number of inputs
0x94, 0x65, 0x83, 0xd9, 0x17, 0xc7, 0xe6, 0xcc, // previous output
0x53, 0x47, 0x24, 0x23, 0xc6, 0xfa, 0xf3, 0x2c,
0x7a, 0x44, 0xe5, 0xc9, 0x43, 0xb0, 0x74, 0x17,
0x02, 0x7a, 0x3b, 0x19, 0x07, 0xff, 0x49, 0x40,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6B, // script length
0x48, // 72 bytes of data follows
0x30, 0x45, 0x02, 0x21, 0x00, 0x83, 0xc1, 0xce, // signature
0xb7, 0x9d, 0x99, 0xf4, 0x63, 0xe4, 0x4e, 0x36,
0x06, 0x14, 0xa6, 0x99, 0x6f, 0xb5, 0x66, 0xd8,
0x33, 0x04, 0x07, 0x38, 0x59, 0x63, 0xc5, 0xf1,
0xc4, 0xb7, 0x2a, 0x3a, 0x67, 0x02, 0x20, 0x30,
0x9a, 0x36, 0x1b, 0x7f, 0x07, 0xa9, 0x2c, 0xc4,
0x9e, 0x2e, 0x67, 0xeb, 0xb0, 0x78, 0x9c, 0x3e,
0xc4, 0xdb, 0x9d, 0x59, 0x40, 0x7d, 0x6d, 0x6e,
0x10, 0x7e, 0xc4, 0x0a, 0x20, 0x17, 0xb5, 0x01,
0x21, // 33 bytes of data follows
0x02, 0x94, 0x69, 0xf7, 0xc2, 0xf2, 0xcf, 0x66, // compressed public key
0x9d, 0x1c, 0x45, 0x2f, 0x09, 0x93, 0x62, 0x65,
0x8c, 0x94, 0x3f, 0xc6, 0x91, 0x85, 0x69, 0x35,
0x7c, 0x4a, 0xae, 0xec, 0xa2, 0x6e, 0x8b, 0x4b, 0x41,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x78, 0x8b, 0xcd, 0x5a, 0xbc, 0xf1, 0x37, 0xe2, // previous output
0x03, 0xcd, 0x2a, 0x0d, 0x40, 0x41, 0xf4, 0xd9,
0x0c, 0x59, 0x81, 0x54, 0x86, 0xf7, 0xf8, 0xee,
0xad, 0x87, 0xea, 0xab, 0x7e, 0xf8, 0x6d, 0xf2,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6A, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x74, 0xf5, 0xee, 0xa7,
0xe8, 0x57, 0x23, 0xa6, 0x5f, 0x41, 0xb6, 0x9e,
0x65, 0x31, 0x8b, 0xa5, 0x4e, 0xbe, 0xb9, 0x3b,
0x16, 0xfd, 0xd5, 0xd7, 0xc0, 0x9f, 0x7c, 0x7a,
0x3a, 0xcc, 0x01, 0x4f, 0x02, 0x20, 0x4b, 0x03,
0xe7, 0x19, 0x15, 0x22, 0x3b, 0x5b, 0xe7, 0x51,
0xaf, 0x1e, 0x7e, 0xb8, 0x43, 0x0b, 0xf4, 0x9e,
0x4e, 0x2d, 0x53, 0x81, 0x02, 0x2d, 0xc5, 0xe4,
0x3e, 0xae, 0x9b, 0x88, 0x9d, 0x9c, 0x01,
0x21, // 33 bytes of data follows
0x03, 0x55, 0xaf, 0x8c, 0x21, 0x9b, 0xb5, 0x89,
0x5f, 0x4c, 0x1a, 0x57, 0x41, 0xd8, 0x69, 0x34,
0xf0, 0x25, 0x50, 0x46, 0x25, 0xa8, 0xb4, 0x27,
0xc9, 0xa5, 0x71, 0xab, 0xb9, 0xce, 0x89, 0x24, 0x20,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xdf, 0x33, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01323999 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xbe, 0xc4, 0x63, 0x34, 0x0d, 0x50, 0xf3, 0x8e, 0x9a, 0xbc,
0x4f, 0x88, 0x79, 0xf8, 0x1f, 0x25, 0x5b, 0xa7, 0xb1, 0x3c,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x40, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01 BTC
0x16, // script length
0x14, // 20 bytes of data follows
0x93, 0xdd, 0x75, 0x55, 0x88, 0x93, 0xd9, 0x7c, 0x53, 0x00,
0x5f, 0x6b, 0x63, 0xb9, 0xe4, 0x00, 0x54, 0x01, 0xa9, 0x31,
0x87, // OP_EQUAL
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** This is #good_p2sh_transaction, but with a non-standard output script
  * which is almost a P2SH output script. */
static const uint8_t nonstandard_p2sh_transaction3[] = {
0x01, 0x00, 0x00, 0x00, // version
0x02, // number of inputs
0x94, 0x65, 0x83, 0xd9, 0x17, 0xc7, 0xe6, 0xcc, // previous output
0x53, 0x47, 0x24, 0x23, 0xc6, 0xfa, 0xf3, 0x2c,
0x7a, 0x44, 0xe5, 0xc9, 0x43, 0xb0, 0x74, 0x17,
0x02, 0x7a, 0x3b, 0x19, 0x07, 0xff, 0x49, 0x40,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6B, // script length
0x48, // 72 bytes of data follows
0x30, 0x45, 0x02, 0x21, 0x00, 0x83, 0xc1, 0xce, // signature
0xb7, 0x9d, 0x99, 0xf4, 0x63, 0xe4, 0x4e, 0x36,
0x06, 0x14, 0xa6, 0x99, 0x6f, 0xb5, 0x66, 0xd8,
0x33, 0x04, 0x07, 0x38, 0x59, 0x63, 0xc5, 0xf1,
0xc4, 0xb7, 0x2a, 0x3a, 0x67, 0x02, 0x20, 0x30,
0x9a, 0x36, 0x1b, 0x7f, 0x07, 0xa9, 0x2c, 0xc4,
0x9e, 0x2e, 0x67, 0xeb, 0xb0, 0x78, 0x9c, 0x3e,
0xc4, 0xdb, 0x9d, 0x59, 0x40, 0x7d, 0x6d, 0x6e,
0x10, 0x7e, 0xc4, 0x0a, 0x20, 0x17, 0xb5, 0x01,
0x21, // 33 bytes of data follows
0x02, 0x94, 0x69, 0xf7, 0xc2, 0xf2, 0xcf, 0x66, // compressed public key
0x9d, 0x1c, 0x45, 0x2f, 0x09, 0x93, 0x62, 0x65,
0x8c, 0x94, 0x3f, 0xc6, 0x91, 0x85, 0x69, 0x35,
0x7c, 0x4a, 0xae, 0xec, 0xa2, 0x6e, 0x8b, 0x4b, 0x41,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x78, 0x8b, 0xcd, 0x5a, 0xbc, 0xf1, 0x37, 0xe2, // previous output
0x03, 0xcd, 0x2a, 0x0d, 0x40, 0x41, 0xf4, 0xd9,
0x0c, 0x59, 0x81, 0x54, 0x86, 0xf7, 0xf8, 0xee,
0xad, 0x87, 0xea, 0xab, 0x7e, 0xf8, 0x6d, 0xf2,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6A, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x74, 0xf5, 0xee, 0xa7,
0xe8, 0x57, 0x23, 0xa6, 0x5f, 0x41, 0xb6, 0x9e,
0x65, 0x31, 0x8b, 0xa5, 0x4e, 0xbe, 0xb9, 0x3b,
0x16, 0xfd, 0xd5, 0xd7, 0xc0, 0x9f, 0x7c, 0x7a,
0x3a, 0xcc, 0x01, 0x4f, 0x02, 0x20, 0x4b, 0x03,
0xe7, 0x19, 0x15, 0x22, 0x3b, 0x5b, 0xe7, 0x51,
0xaf, 0x1e, 0x7e, 0xb8, 0x43, 0x0b, 0xf4, 0x9e,
0x4e, 0x2d, 0x53, 0x81, 0x02, 0x2d, 0xc5, 0xe4,
0x3e, 0xae, 0x9b, 0x88, 0x9d, 0x9c, 0x01,
0x21, // 33 bytes of data follows
0x03, 0x55, 0xaf, 0x8c, 0x21, 0x9b, 0xb5, 0x89,
0x5f, 0x4c, 0x1a, 0x57, 0x41, 0xd8, 0x69, 0x34,
0xf0, 0x25, 0x50, 0x46, 0x25, 0xa8, 0xb4, 0x27,
0xc9, 0xa5, 0x71, 0xab, 0xb9, 0xce, 0x89, 0x24, 0x20,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xdf, 0x33, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01323999 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xbe, 0xc4, 0x63, 0x34, 0x0d, 0x50, 0xf3, 0x8e, 0x9a, 0xbc,
0x4f, 0x88, 0x79, 0xf8, 0x1f, 0x25, 0x5b, 0xa7, 0xb1, 0x3c,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x40, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01 BTC
0x19, // script length
0xA9, // OP_HASH160
0x16, // 22 bytes of data follows
0x93, 0xdd, 0x75, 0x55, 0x88, 0x93, 0xd9, 0x7c, 0x53, 0x00,
0x5f, 0x6b, 0x63, 0xb9, 0xe4, 0x00, 0x54, 0x01, 0xa9, 0x31, 0xff, 0xff,
0x87, // OP_EQUAL
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** This is #good_p2sh_transaction, but with a non-standard output script
  * which is almost a P2SH output script. */
static const uint8_t nonstandard_p2sh_transaction4[] = {
0x01, 0x00, 0x00, 0x00, // version
0x02, // number of inputs
0x94, 0x65, 0x83, 0xd9, 0x17, 0xc7, 0xe6, 0xcc, // previous output
0x53, 0x47, 0x24, 0x23, 0xc6, 0xfa, 0xf3, 0x2c,
0x7a, 0x44, 0xe5, 0xc9, 0x43, 0xb0, 0x74, 0x17,
0x02, 0x7a, 0x3b, 0x19, 0x07, 0xff, 0x49, 0x40,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6B, // script length
0x48, // 72 bytes of data follows
0x30, 0x45, 0x02, 0x21, 0x00, 0x83, 0xc1, 0xce, // signature
0xb7, 0x9d, 0x99, 0xf4, 0x63, 0xe4, 0x4e, 0x36,
0x06, 0x14, 0xa6, 0x99, 0x6f, 0xb5, 0x66, 0xd8,
0x33, 0x04, 0x07, 0x38, 0x59, 0x63, 0xc5, 0xf1,
0xc4, 0xb7, 0x2a, 0x3a, 0x67, 0x02, 0x20, 0x30,
0x9a, 0x36, 0x1b, 0x7f, 0x07, 0xa9, 0x2c, 0xc4,
0x9e, 0x2e, 0x67, 0xeb, 0xb0, 0x78, 0x9c, 0x3e,
0xc4, 0xdb, 0x9d, 0x59, 0x40, 0x7d, 0x6d, 0x6e,
0x10, 0x7e, 0xc4, 0x0a, 0x20, 0x17, 0xb5, 0x01,
0x21, // 33 bytes of data follows
0x02, 0x94, 0x69, 0xf7, 0xc2, 0xf2, 0xcf, 0x66, // compressed public key
0x9d, 0x1c, 0x45, 0x2f, 0x09, 0x93, 0x62, 0x65,
0x8c, 0x94, 0x3f, 0xc6, 0x91, 0x85, 0x69, 0x35,
0x7c, 0x4a, 0xae, 0xec, 0xa2, 0x6e, 0x8b, 0x4b, 0x41,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x78, 0x8b, 0xcd, 0x5a, 0xbc, 0xf1, 0x37, 0xe2, // previous output
0x03, 0xcd, 0x2a, 0x0d, 0x40, 0x41, 0xf4, 0xd9,
0x0c, 0x59, 0x81, 0x54, 0x86, 0xf7, 0xf8, 0xee,
0xad, 0x87, 0xea, 0xab, 0x7e, 0xf8, 0x6d, 0xf2,
0x00, 0x00, 0x00, 0x00, // number in previous output
0x6A, // script length
0x47, // 71 bytes of data follows
0x30, 0x44, 0x02, 0x20, 0x74, 0xf5, 0xee, 0xa7,
0xe8, 0x57, 0x23, 0xa6, 0x5f, 0x41, 0xb6, 0x9e,
0x65, 0x31, 0x8b, 0xa5, 0x4e, 0xbe, 0xb9, 0x3b,
0x16, 0xfd, 0xd5, 0xd7, 0xc0, 0x9f, 0x7c, 0x7a,
0x3a, 0xcc, 0x01, 0x4f, 0x02, 0x20, 0x4b, 0x03,
0xe7, 0x19, 0x15, 0x22, 0x3b, 0x5b, 0xe7, 0x51,
0xaf, 0x1e, 0x7e, 0xb8, 0x43, 0x0b, 0xf4, 0x9e,
0x4e, 0x2d, 0x53, 0x81, 0x02, 0x2d, 0xc5, 0xe4,
0x3e, 0xae, 0x9b, 0x88, 0x9d, 0x9c, 0x01,
0x21, // 33 bytes of data follows
0x03, 0x55, 0xaf, 0x8c, 0x21, 0x9b, 0xb5, 0x89,
0x5f, 0x4c, 0x1a, 0x57, 0x41, 0xd8, 0x69, 0x34,
0xf0, 0x25, 0x50, 0x46, 0x25, 0xa8, 0xb4, 0x27,
0xc9, 0xa5, 0x71, 0xab, 0xb9, 0xce, 0x89, 0x24, 0x20,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xdf, 0x33, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01323999 BTC
0x19, // script length
0x76, // OP_DUP
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0xbe, 0xc4, 0x63, 0x34, 0x0d, 0x50, 0xf3, 0x8e, 0x9a, 0xbc,
0x4f, 0x88, 0x79, 0xf8, 0x1f, 0x25, 0x5b, 0xa7, 0xb1, 0x3c,
0x88, // OP_EQUALVERIFY
0xAC, // OP_CHECKSIG
0x40, 0x42, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01 BTC
0x19, // script length
0xA9, // OP_HASH160
0x14, // 20 bytes of data follows
0x93, 0xdd, 0x75, 0x55, 0x88, 0x93, 0xd9, 0x7c, 0x53, 0x00,
0x5f, 0x6b, 0x63, 0xb9, 0xe4, 0x00, 0x54, 0x01, 0xa9, 0x31, 0xff, 0xff,
0x87, // OP_EQUAL
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00 // hashtype
};

/** These test cases were constructed manually. */
static const struct EncapsulateSignatureTestStruct encapsulate_tests[] = {
{ // All zeroes for r and s. This produces a minimum length signature.
{ // r
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{ // s
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
9, // expected_length
// expected_signature
{0x30, 0x06, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x01}},

{ // r and s < 128. This produces a minimum length signature.
{ // r
0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{ // s
0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
9, // expected_length
// expected_signature
{0x30, 0x06, 0x02, 0x01, 0x7f, 0x02, 0x01, 0x7f, 0x01}},

{ // r is 1, s is 0.
{ // r
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{ // s
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
9, // expected_length
// expected_signature
{0x30, 0x06, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00, 0x01}},

{ // r is 0x80, s is 0. This tests zero-padding of r.
{ // r
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{ // s
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
10, // expected_length
// expected_signature
{0x30, 0x07, 0x02, 0x02, 0x00, 0x80, 0x02, 0x01, 0x00, 0x01}},

{ // r is 0, s is 0xff. This tests zero-padding of s.
{ // r
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{ // s
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
10, // expected_length
// expected_signature
{0x30, 0x07, 0x02, 0x01, 0x00, 0x02, 0x02, 0x00, 0xff, 0x01}},

{ // r is 0, s is 2 ^ 256 - 1. This tests whether the leading zero is kept.
{ // r
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{ // s
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
41, // expected_length
// expected_signature
{0x30, 0x26, 0x02, 0x01, 0x00, 0x02, 0x21, 0x00,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}},

{ // Both r and s are 2 ^ 256 - 1. This results in a maximum length signature.
{ // r
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
{ // s
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
73, // expected_length
// expected_signature
{0x30, 0x46, 0x02, 0x21, 0x00,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0x02, 0x21, 0x00,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}},

{ // r is 2 ^ 256 - 1, s is 2 ^ 255 - 1. s shouldn't have a leading zero.
{ // r
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
{ // s
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f},
72, // expected_length
// expected_signature
{0x30, 0x45, 0x02, 0x21, 0x00,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0x02, 0x20,
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}},

{ // r is 2 ^ 255 - 1, s is 2 ^ 256 - 1. r shouldn't have a leading zero.
{ // r
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f},
{ // s
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
72, // expected_length
// expected_signature
{0x30, 0x45, 0x02, 0x20,
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0x02, 0x21, 0x00,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}},

{ // Both r and s are 2 ^ 255 - 1. Both shouldn't have a leading zero.
{ // r
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f},
{ // s
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f},
71, // expected_length
// expected_signature
{0x30, 0x44, 0x02, 0x20,
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0x02, 0x20,
0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}},

{ // Both r and s are between 0 and 2 ^ 255 - 1. This tests zero removal.
{ // r
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x12, 0x00, 0x00},
{ // s
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00},
66, // expected_length
// expected_signature
{0x30, 0x3f, 0x02, 0x1e,
0x12, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0x02, 0x1d,
0x00, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}},

{ // r and s are swapped compared to previous test.
{ // r
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00},
{ // s
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x12, 0x00, 0x00},
66, // expected_length
// expected_signature
{0x30, 0x3f, 0x02, 0x1d,
0x00, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0x02, 0x1e,
0x12, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01}}
};

/** Private key to sign test transaction with. */
static const uint8_t private_key[] = {
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee,
0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee};

void TestTransaction(statistics * stats);

#endif