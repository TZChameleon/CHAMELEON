/** \file
  *
  * \brief Not defined yet
  *
  * This file is licensed as described by the file LICENCE.
  */

#ifndef TEST_STREAM_H_INCLUDED
#define TEST_STREAM_H_INCLUDED

#include "common.h"
#include "test_helpers.h"

/* ====================================================================== */
/** Test stream data for: initialize. */
static const char test_stream_init_description[] = "test_stream_init: Reset state of wallet.";

static const uint8_t test_stream_init[] = {
0x23, 0x23,
0x00, 0x17,
0x00, 0x00, 0x00, 0x04,
0x0a, 0x02, 0x61, 0x62};

static const char response_stream_init[] = "2323003a000000450a026162120e4d6972616a65204c696d69746564180120002a20436f6e6669677572656420666f72204a756e6f2d7232206279204d6972616a653001380140014a01005000";

/* ====================================================================== */
/** Test stream data for: Ping (get version). */
static const char test_stream_ping_description[] = "test_stream_ping: Check whether device is still alive.";

static const uint8_t test_stream_ping[] = {
0x23, 0x23,
0x00, 0x00,
0x00, 0x00, 0x00, 0x05,
0x0a, 0x03, 0x4d, 0x6f, 0x6f};

static const char response_stream_ping[] = "23230033000000090a034d6f6f12026162";

/* ====================================================================== */
/** Test stream data for: format storage and allow button press. */
static const char test_stream_format_description[] = "test_stream_format: Format the storage and allow button press.";

static const uint8_t test_stream_format[] = {
0x23, 0x23,
0x00, 0x0d,
0x00, 0x00, 0x00, 0x22,
0x0a, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x51,
0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x57,
0x00, 0x00, 0x00, 0x06,
0x0a, 0x04, 0x31, 0x32, 0x33, 0x34};

static const char response_stream_format[] = "232300500000000023230056000000002323003400000000";

/* ====================================================================== */
/** Test stream data for: list wallets. */
static const char test_stream_list_wallets_description[] = "test_stream_list_wallets: Lists the wallets.";

static const uint8_t test_stream_list_wallets[] = {
0x23, 0x23,
0x00, 0x10,
0x00, 0x00, 0x00, 0x00};

static const char response_stream_list_wallets_0[] = "2323003200000000";

static const char response_stream_list_wallets_1[] = "23230032000000400a3e08001228656565656565652066662020206f00000000000000000000000000000000000000000000000000001a10931dca9da1455f19eb9bd60ebba9b819";

static const char response_stream_list_wallets_2[] = "23230032000000400a3e08001228717171727074202068680000000000000000000000000000000000000000000000000000000000001a10931dca9da1455f19eb9bd60ebba9b819";

/* ====================================================================== */
/** Test stream data for: create new wallet and allow button press. */
static const char  test_stream_new_wallet_description[] = "test_stream_new_wallet: Create new wallet and allow button press.";

static const uint8_t test_stream_new_wallet[] = {
0x23, 0x23,
0x00, 0x04,
0x00, 0x00, 0x00, 0x52,
0x12, 0x40,
0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,		/* Password */
0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00,
0x00, 0x00, 0x42, 0x00, 0x00, 0xfd, 0x00, 0x00,
0x00, 0x00, 0x00, 0x42, 0xfc, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xee, 0x43, 0x00, 0x00, 0x00,
0x00, 0x00, 0x10, 0x00, 0x00, 0x44, 0x00, 0x00,
0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00,
0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
0x1a, 0x0e,
0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x20, 	/* Å´allet name */
0x66, 0x66, 0x20, 0x20, 0x20, 0x6f,

0x23, 0x23,
0x00, 0x51,
0x00, 0x00, 0x00, 0x00};

static const char response_stream_new_wallet[] = "23230050000000002323003400000000";

/* ====================================================================== */
/** Test stream data for: create new address and allow button press. */
static const char test_stream_new_address_description[] = "test_stream_new_address: Create new address and allow button press.";

static const uint8_t test_stream_new_address[] = {
0x23, 0x23,
0x00, 0x05,
0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x51,
0x00, 0x00, 0x00, 0x00};

static const char response_stream_new_address[] = "2323005000000000232300300000003b08011221031e5aabb269e5208067dcb9eb2f879f6b91306ddab9ed3d6d6f8ecb15342433a11a146fae8dcf63676fe8a4f95e7620bdff12159092172323005000000000232300300000003b080212210289dce207e1af2a0ab3e4faa970937cfdf735352f9e0aa6ef83768452e6da08f91a149e879f2930c5d00cd4d096b6a33c4888ed3430382323005000000000232300300000003b080312210366df5d38020d3afb109db9a7a1c5e8ff0e75f0062413472b146d9a3435711c181a1421b164a32a449db2a12b095c08037ddecaed5bc92323005000000000232300300000003b08041221033aadcdac11f6eac324ef441ce397188c18f34bd45a21ac5d3b396dd699c125d11a14d0009df3a5402e7adc05372345393f7c1940a8c9";

/* ====================================================================== */
/** Test stream data for: get number of addresses. */
static const char test_stream_get_num_addresses_description[] = "test_stream_get_num_addresses: Get number of addresses.";

static const uint8_t test_stream_get_num_addresses[] = {
0x23, 0x23,
0x00, 0x06,
0x00, 0x00, 0x00, 0x00};

static const char response_stream_get_num_addresses[] = "23230031000000020804";

/* ====================================================================== */
/** Test stream data for: get address 1. */
static const char test_stream_get_address1_description[] = "test_stream_get_address1: Get address #1.";

static const uint8_t test_stream_get_address1[] = {
0x23, 0x23,
0x00, 0x09,
0x00, 0x00, 0x00, 0x02,
0x08, 0x01};

static const char response_stream_get_address1[] = "232300300000003b08011221031e5aabb269e5208067dcb9eb2f879f6b91306ddab9ed3d6d6f8ecb15342433a11a146fae8dcf63676fe8a4f95e7620bdff1215909217";

/* ====================================================================== */
/** Test stream data for: get address 0 (which is an invalid address
  * handle). */
static const char test_stream_get_address0_description[] = "test_stream_get_address0: Get address #0 (which is an invalid address handle).";

static const uint8_t test_stream_get_address0[] = {
0x23, 0x23,
0x00, 0x09,
0x00, 0x00, 0x00, 0x02,
0x08, 0x00};

static const char response_stream_get_address0[] = "232300350000001c088880081216496e76616c696420616464726573732068616e646c65";

/* ====================================================================== */
/** Test stream data for: sign something and allow button press. */
static const char test_stream_sign_tx_description[] = "test_stream_sign_tx: Sign something and allow button press.";

static const uint8_t test_stream_sign_tx[] = {
0x23, 0x23,
0x00, 0x0a,
0x00, 0x00, 0x01, 0xa0,
0x08, 0x01, 0x12, 0x9b, 0x03,
// transaction data is below
0x01, // is_ref = 1 (input transaction)
0x01, 0x00, 0x00, 0x00, // output number to examine
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xdf, 0x08, 0xf9, 0xa3, 0x7c, 0x6d, 0x71, 0x3c, // previous output (input transaction reference hash)
0x6a, 0x99, 0x2e, 0x88, 0x29, 0x8e, 0x0b, 0x4c,
0x8f, 0xb5, 0xf9, 0x0e, 0x11, 0xf0, 0x2c, 0xa7,
0x36, 0x72, 0xeb, 0x58, 0xb3, 0x04, 0xef, 0xc0,
0x01, 0x00, 0x00, 0x00, // number in previous output (input transaction reference number)
0x8a, // script length (input script)
	0x47, // 71 bytes of data follows
	0x30, 0x44, 0x02, 0x20, 0x1b, 0xf4, 0xef, 0x3c, 0x34, 0x96, 0x02, 0x9b, 0x1a,
	0xb1, 0xc8, 0x49, 0xbf, 0x18, 0x55, 0xcc, 0x16, 0xbc, 0x52, 0x6d, 0xcc, 0x20,
	0xfb, 0x7c, 0x0a, 0x1d, 0x48, 0xd6, 0xe9, 0xbd, 0xd7, 0xb1, 0x02, 0x20, 0x53,
	0xb1, 0xa3, 0xaa, 0xbf, 0xd3, 0x87, 0x84, 0xdc, 0xf3, 0x10, 0xe5, 0xd2, 0x09,
	0xa4, 0xba, 0xb0, 0x01, 0x62, 0xe5, 0xbc, 0x09, 0x75, 0x9d, 0x4f, 0x74, 0x2c,
	0xb4, 0x6b, 0x32, 0x37, 0x2c, 0x01,
	0x41, // 65 bytes of data follows
	0x04, 0x05, 0x4d, 0xb5, 0xe0, 0x8e, 0x2a, 0x33, 0x89, 0x2c, 0xf3, 0x4b, 0x7e,
	0xbc, 0x18, 0x3b, 0xa5, 0xf5, 0x54, 0xc6, 0x9d, 0x6d, 0x21, 0x65, 0x60, 0x89,
	0xf5, 0x5e, 0x2d, 0x0f, 0x3a, 0x68, 0x08, 0x23, 0x83, 0x19, 0xcd, 0x89, 0xba,
	0xda, 0x09, 0x9b, 0xc6, 0xef, 0x3f, 0xdc, 0x80, 0xd8, 0x7a, 0xb2, 0xbf, 0x2b,
	0x37, 0x18, 0xdd, 0x4a, 0x4e, 0x36, 0x09, 0x60, 0x28, 0x6e, 0x2e, 0x77, 0x57,
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0xc0, 0xa4, 0x70, 0x57, 0x00, 0x00, 0x00, 0x00, // 14.67 BTC
0x19, // script length
	0x76, // OP_DUP
	0xA9, // OP_HASH160
	0x14, // 20 bytes of data follows
	// 1Q6W8HTPdwccCkLRMLJpYkGvweKhpsKKjE
	0xfd, 0x55, 0x49, 0x20, 0x22, 0xa0, 0x3f, 0xf7, 0x7a, 0x9d,
	0xe0, 0x0d, 0xa2, 0x18, 0x08, 0x0c, 0xa9, 0x51, 0xde, 0xef,
	0x88, // OP_EQUALVERIFY
	0xAC, // OP_CHECKSIG
0x40, 0x54, 0x92, 0x3d, 0x00, 0x00, 0x00, 0x00, // 10.33 BTC
0x19, // script length
	0x76, // OP_DUP
	0xA9, // OP_HASH160
	0x14, // 20 bytes of data follows
	// 16E7VhudyU3iXNddNazG8sChjQwfWcrHNw
	0x39, 0x53, 0x75, 0x46, 0x88, 0x84, 0x3d, 0xe5, 0x50, 0x0b,
	0x79, 0x91, 0x33, 0x7f, 0x96, 0xf5, 0x41, 0x71, 0x48, 0xa1,
	0x88, // OP_EQUALVERIFY
	0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime

// The main (spending) transaction.
0x00, // is_ref = 0 (main)
0x01, 0x00, 0x00, 0x00, // version
0x01, // number of inputs
0xee, 0xce, 0xae, 0x86, 0xf5, 0x70, 0x4d, 0x76, // previous output
0xb8, 0x54, 0x5e, 0x6d, 0xcf, 0x21, 0xf1, 0x75,
0x35, 0x7f, 0x83, 0xbd, 0xa4, 0x96, 0x43, 0x83,
0xd6, 0xdd, 0x7e, 0x41, 0x68, 0x1b, 0x5e, 0x1a,
0x01, 0x00, 0x00, 0x00, // number in previous output
0x19, // script length
	0x76, // OP_DUP
	0xA9, // OP_HASH160
	0x14, // 20 bytes of data follows
	0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
	0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff, 0xee, 0xee, 0x00, 0x00,
	0x88, // OP_EQUALVERIFY
	0xAC, // OP_CHECKSIG
0xFF, 0xFF, 0xFF, 0xFF, // sequence
0x02, // number of outputs
0x00, 0x46, 0xc3, 0x23, 0x00, 0x00, 0x00, 0x00, // 6 BTC
0x19, // script length
	0x76, // OP_DUP
	0xA9, // OP_HASH160
	0x14, // 20 bytes of data follows
	// 11MXTrefsj1ZS3Q5e9D6DxGzZKHWALyo9
	0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
	0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
	0x88, // OP_EQUALVERIFY
	0xAC, // OP_CHECKSIG
0x87, 0xd6, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, // 0.01234567 BTC
0x19, // script length
	0x76, // OP_DUP
	0xA9, // OP_HASH160
	0x14, // 20 bytes of data follows
	// 16eCeyy63xi5yde9VrX4XCcRrCKZwtUZK
	0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
	0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x11, 0x22, 0x33,
	0x88, // OP_EQUALVERIFY
	0xAC, // OP_CHECKSIG
0x00, 0x00, 0x00, 0x00, // locktime
0x01, 0x00, 0x00, 0x00, // hashtype

0x23, 0x23, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00
};

static const char response_stream_sign_tx0[] = "232300500000000023230039000000490a473044022058e0f14b11daf5156c56216f73506615ec67517bb0b95e0aac9bc15427819793022051af14288e4b2275792d5b4264ca47681655209f68df8701b59cddbbf8581aa501";

static const char response_stream_sign_tx1[] = "23230039000000490a473044022058e0f14b11daf5156c56216f73506615ec67517bb0b95e0aac9bc15427819793022051af14288e4b2275792d5b4264ca47681655209f68df8701b59cddbbf8581aa501";

/* ====================================================================== */
/** Test stream data for: load wallet using incorrect key. */
static const char test_stream_load_incorrect_description[] = "test_stream_load_incorrect: Load wallet using incorrect key.";

static const uint8_t test_stream_load_incorrect[] = {
0x23, 0x23,
0x00, 0x0b,
0x00, 0x00, 0x00, 0x02,
0x08, 0x00,

0x23, 0x23,
0x00, 0x54,
0x00, 0x00, 0x00, 0x22,
0x0a, 0x20,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* Password */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const char response_stream_load_incorrect[] = "2323005300000000232300350000001a08868008121457616c6c657420646f65736e2774206578697374";

/* ====================================================================== */
/** Test stream data for: load wallet using correct key. */
static const char test_stream_load_correct_description[] = "test_stream_load_correct: Load wallet using correct key.";

static const uint8_t test_stream_load_correct[] = {
0x23, 0x23,
0x00, 0x0b,
0x00, 0x00, 0x00, 0x02,
0x08, 0x00,

0x23, 0x23,
0x00, 0x54,
0x00, 0x00, 0x00, 0x42,
0x0a, 0x40,
0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,	/* Password */
0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00,
0x00, 0x00, 0x42, 0x00, 0x00, 0xfd, 0x00, 0x00,
0x00, 0x00, 0x00, 0x42, 0xfc, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0xee, 0x43, 0x00, 0x00, 0x00,
0x00, 0x00, 0x10, 0x00, 0x00, 0x44, 0x00, 0x00,
0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00,
0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46};

static const char response_stream_load_correct[] = "23230053000000002323003400000000";

/* ====================================================================== */
/** Test stream data for: change encryption key and allow button press. */
static const char test_stream_change_key_description[] = "test_stream_change_key: Change encryption key and allow button press.";

static const uint8_t test_stream_change_key[] = {
0x23, 0x23,
0x00, 0x0e,
0x00, 0x00, 0x00, 0x22,
0x0a, 0x20,
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/* New password */
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x51,
0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x57,
0x00, 0x00, 0x00, 0x06,
0x0a, 0x04, 0x31, 0x32, 0x33, 0x34};

static const char response_stream_change_key[] = "232300500000000023230056000000002323003400000000";

/* ====================================================================== */
/** Test stream data for: load with new encryption key. */
static const char test_stream_load_with_changed_key_description[] = "test_stream_load_with_changed_key: Load with new encryption key.";

static const uint8_t test_stream_load_with_changed_key[] = {
0x23, 0x23, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02,
0x08, 0x00,

0x23, 0x23, 0x00, 0x54, 0x00, 0x00, 0x00, 0x22,
0x0a, 0x20,
0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

static const char response_stream_load_with_changed_key[] = "23230053000000002323003400000000";

/* ====================================================================== */
/** Test stream data for: change wallet name and allow button press. */
static const char test_stream_change_name_description[] = "test_stream_change_name: Change wallet name and allow button press.";

static const uint8_t test_stream_change_name[] = {
0x23, 0x23, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0c,
0x0a, 0x0a,
0x71, 0x71, 0x71, 0x72, 0x70, 0x74, 0x20, 0x20,
0x68, 0x68,

0x23, 0x23, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00};

static const char response_stream_change_name[] = "23230050000000002323003400000000";

/* ====================================================================== */
/** Test stream data for: backup wallet and allow button press. */
static const char test_stream_backup_wallet_description[] = "test_stream_backup_wallet: Backup wallet and allow button press.";

static const uint8_t test_stream_backup_wallet[] = {
0x23, 0x23,
0x00, 0x11,
0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x51,
0x00, 0x00, 0x00, 0x00};

static const char response_stream_backup_wallet[] = "23230050000000002323003400000000";

/* ====================================================================== */
/** Test stream data for: delete wallet and allow button press. */
static const char test_stream_delete_description[] = "test_stream_delete: Delete wallet and allow button press.";

static const uint8_t test_stream_delete[] = {
0x23, 0x23,
0x00, 0x16,
0x00, 0x00, 0x00, 0x02,
0x08, 0x00,

0x23, 0x23,
0x00, 0x51,
0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x57,
0x00, 0x00, 0x00, 0x06,
0x0a, 0x04, 0x31, 0x32, 0x33, 0x34};

static const char response_stream_delete[] = "232300500000000023230056000000002323003400000000";

/* ====================================================================== */
/** Test stream data for: restore wallet and allow button press. */
static const char test_stream_restore_wallet_description[] = "test_stream_restore_wallet: Restore wallet and allow button press.";

static const uint8_t test_stream_restore_wallet[] = {
0x23, 0x23,
0x00, 0x12,
0x00, 0x00, 0x00, 0x7a,
0x0a, 0x36,
0x08, 0x00, // wallet number
0x12, 0x20,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // encryption key
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x1a, 0x0e,
0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x20, // name
0x66, 0x66, 0x20, 0x20, 0x20, 0x6F,
0x20, 0x00, // make hidden?
0x12, 0x40,
0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, // seed
0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0,
0x12, 0x34, 0x56, 0x00, 0x9a, 0xbc, 0xde, 0xf0,
0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0,
0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0,
0xea, 0x11, 0x44, 0xf0, 0x0f, 0xb0, 0x0b, 0x50,
0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0,
0x12, 0x34, 0xde, 0xad, 0xfe, 0xed, 0xde, 0xf0,

0x23, 0x23, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00};

static const char response_stream_restore_wallet[] = "23230050000000002323003400000000";

/* ====================================================================== */
/** Test stream data for: get device UUID. */
static const char test_stream_get_device_uuid_description[] = "test_stream_get_device_uuid: Get device UUID.";

static const uint8_t test_stream_get_device_uuid[] = {
0x23, 0x23,
0x00, 0x13,
0x00, 0x00, 0x00, 0x00};

static const char response_stream_get_device_uuid [] = "23230036000000120a10bc0a1f1e085cf38d9d6efc75474ef54a";

/* ====================================================================== */
/** Test stream data for: get 0 bytes of entropy. */
static const char test_stream_get_entropy0_description[] = "test_stream_get_entropy0: Get 0 bytes of entropy";

static const uint8_t test_stream_get_entropy0[] = {
0x23, 0x23,
0x00, 0x14,
0x00, 0x00, 0x00, 0x02,
0x08, 0x00};

static const char response_stream_get_entropy0[] = "23230037000000020a00";

/* ====================================================================== */
/** Test stream data for: get 1 byte of entropy. */
static const char test_stream_get_entropy1_description[] = "test_stream_get_entropy1: Get 1 bytes of entropy";

static const uint8_t test_stream_get_entropy1[] = {
0x23, 0x23,
0x00, 0x14,
0x00, 0x00, 0x00, 0x02,
0x08, 0x01};

static const char response_stream_get_entropy1[] = "23230037000000030a0175";

/* ====================================================================== */
/** Test stream data for: get 32 bytes of entropy. */
static const char test_stream_get_entropy32_description[] = "test_stream_get_entropy32: Get 32 bytes of entropy";

static const uint8_t test_stream_get_entropy32[] = {
0x23, 0x23,
0x00, 0x14,
0x00, 0x00, 0x00, 0x02,
0x08, 0x20};

static const char response_stream_get_entropy32[] = "23230037000000220a202f4d850a3170a71e791cd268d3211f07685acb5fdd2e872ad168f6c43242d178";

/* ====================================================================== */
/** Test stream data for: get 100 bytes of entropy. */
static const char test_stream_get_entropy100_description[] = "test_stream_get_entropy100: Get 100 bytes of entropy";

static const uint8_t test_stream_get_entropy100[] = {
0x23, 0x23,
0x00, 0x14,
0x00, 0x00, 0x00, 0x02,
0x08, 0x64};

static const char response_stream_get_entropy100[] = "23230037000000660a6410e919ebf0f0bd15900b70bd94e12b711e85deb48d5b8b4b263040f0d7530a631b1eead5b1f594c9d7e651842c9d8520fd0d29286316f8343c7ecf9c145ce9445308f2de8fb30e81260336531dcb3dc37d645a9c12855e758ee9149a428a715b51be7023";

/* ====================================================================== */
/** Get master public key and allow button press. */
static const char test_get_master_public_key_description[] = "test_get_master_public_key: Get master public key and allow button press.";

static const uint8_t test_get_master_public_key[] = {
0x23, 0x23,
0x00, 0x15,
0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x51,
0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x57,
0x00, 0x00, 0x00, 0x06,
0x0a, 0x04, 0x31, 0x32, 0x33, 0x34};

static const char response_get_master_public_key[] = "2323005000000000232300560000000023230038000000450a21026d6447a677a2007b379fff03fe2e824955578654e36a8fee11efc655be0092271220123456789abcdef0ea1144f00fb00b50123456789abcdef01234deadfeeddef0";

/* ====================================================================== */
/** Get master public key but don't allow button press. */
static const char test_get_master_public_key_no_press_description[] = "test_get_master_public_key_no_press: Get master public key but don't allow button press.";

static const uint8_t test_get_master_public_key_no_press[] = {
0x23, 0x23,
0x00, 0x15,
0x00, 0x00, 0x00, 0x00,

0x23, 0x23,
0x00, 0x52,
0x00, 0x00, 0x00, 0x00};

static const char response_get_master_public_key_no_press[] = "2323005000000000232300350000001b088580041215486f73742063616e63656c6c656420616374696f6e";

/* ====================================================================== */
/** Test stream data for: load but don't allow password to be sent. */
static const char test_stream_load_no_key_description[] = "test_stream_load_no_key: load but don't allow password to be sent.";

static const uint8_t test_stream_load_no_key[] = {
0x23, 0x23,
0x00, 0x0b,
0x00, 0x00, 0x00, 0x02,
0x08, 0x00,

0x23, 0x23,
0x00, 0x55,
0x00, 0x00, 0x00, 0x00};

static const char response_stream_load_no_key[] = "2323005300000000232300350000001b088580041215486f73742063616e63656c6c656420616374696f6e";

/* ====================================================================== */

void TestStreams(statistics * stats);
void TestPerformanceStreams(statistics * stats);

#endif /* #ifndef TEST_STREAM_H_INCLUDED */
